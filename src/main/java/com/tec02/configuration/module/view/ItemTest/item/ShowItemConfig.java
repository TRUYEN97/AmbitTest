/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.tec02.configuration.module.view.ItemTest.item;

import com.alibaba.fastjson2.JSONObject;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.tec02.common.MyObjectMapper;
import com.tec02.configuration.model.itemTest.ItemConfig;
import com.tec02.function.FunctionFactory;
import com.tec02.function.baseFunction.FunctionConfig;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author Administrator
 */
public class ShowItemConfig extends javax.swing.JPanel {

    private FunctionFactory functionManagement;
    private ItemConfig config;

    /**
     * Creates new form ShowItemConfig
     */
    public ShowItemConfig() {
        initComponents();
    }

    public void init() {
        this.functionManagement = FunctionFactory.getInstance();
        this.cbbFunction.removeAllItems();
        var functions = this.functionManagement.getFunctions();
        List<String> functionNames = new ArrayList<>(functions.keySet());
        Collections.sort(functionNames);
        for (String fucName : functionNames) {
            this.cbbFunction.addItem(functions.get(fucName).getSimpleName());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaConfig = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        spnTimeOut = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        cbMulti = new javax.swing.JCheckBox();
        cbbFunction = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        cbFailContinue = new javax.swing.JCheckBox();
        cbWaitMulti = new javax.swing.JCheckBox();
        cbCheckSpec = new javax.swing.JCheckBox();
        spnRetry = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtItemName = new javax.swing.JTextField();
        txtUpperLimit = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtLowerLimit = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        cbbLimitType = new javax.swing.JComboBox<>();
        cbSkipSpecDebug = new javax.swing.JCheckBox();
        cbAlwaysrun = new javax.swing.JCheckBox();
        cbSkipRunDebug = new javax.swing.JCheckBox();
        slModerun = new javax.swing.JSlider();
        jLabel7 = new javax.swing.JLabel();
        txtApiName = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtFailApiName = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        btSave = new javax.swing.JButton();
        btGetDefaultConfig = new javax.swing.JButton();
        cbStopMultiTasking = new javax.swing.JCheckBox();
        cbStopLocalMultiTasking = new javax.swing.JCheckBox();
        cbWaitLocalMulti = new javax.swing.JCheckBox();
        spnBegin = new javax.swing.JSpinner();
        jLabel11 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 153, 153));

        txtAreaConfig.setColumns(20);
        txtAreaConfig.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtAreaConfig.setRows(5);
        txtAreaConfig.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtAreaConfigKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(txtAreaConfig);

        jPanel1.setBackground(new java.awt.Color(0, 204, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        spnTimeOut.setModel(new javax.swing.SpinnerNumberModel(2147482647, 0, 2147482647, 1));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Time out");

        cbMulti.setText("Multitasking");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Function");

        cbFailContinue.setText("Failure-continue");

        cbWaitMulti.setText("Waiting for multitasking");

        cbCheckSpec.setSelected(true);
        cbCheckSpec.setText("Check spec");

        spnRetry.setModel(new javax.swing.SpinnerNumberModel(0, 0, 2147482647, 1));

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Retry");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Item");

        txtItemName.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        txtUpperLimit.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Upper limit");

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Lower limit");

        txtLowerLimit.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Limit type");

        cbbLimitType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "BOOL", "MATCH", "LIMIT" }));

        cbSkipSpecDebug.setText("Skip check in dubug mode");

        cbAlwaysrun.setText("Always run");

        cbSkipRunDebug.setText("Cancell in dubug mode");

        slModerun.setMaximum(3);
        slModerun.setMinimum(1);
        slModerun.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Mode run");

        txtApiName.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Api name");

        txtFailApiName.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Fail api name");

        btSave.setText("Save");
        btSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSaveActionPerformed(evt);
            }
        });

        btGetDefaultConfig.setText("Get default configuration");
        btGetDefaultConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btGetDefaultConfigActionPerformed(evt);
            }
        });

        cbStopMultiTasking.setText("Stop multitasking");

        cbStopLocalMultiTasking.setText("Stop local multitasking");

        cbWaitLocalMulti.setText("Waiting for local multitasking");

        spnBegin.setModel(new javax.swing.SpinnerNumberModel(-1, -1, 2147482647, 1));

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("Begin");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtLowerLimit)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbWaitLocalMulti, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbStopLocalMultiTasking, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbWaitMulti, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbMulti)
                            .addComponent(cbCheckSpec)
                            .addComponent(cbFailContinue)
                            .addComponent(cbSkipSpecDebug)
                            .addComponent(cbSkipRunDebug)
                            .addComponent(cbAlwaysrun)
                            .addComponent(cbStopMultiTasking, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(txtUpperLimit, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(12, 12, 12))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)
                                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(slModerun, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbbFunction, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(spnRetry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(spnTimeOut, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtItemName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtApiName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtFailApiName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(spnBegin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btSave, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btGetDefaultConfig, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cbbLimitType, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(spnTimeOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(spnRetry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(spnBegin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbbFunction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(txtApiName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(txtFailApiName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(slModerun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cbMulti)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbWaitMulti)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbStopMultiTasking)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbWaitLocalMulti)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbStopLocalMultiTasking)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbFailContinue)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbCheckSpec)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbSkipSpecDebug)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbSkipRunDebug)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbAlwaysrun)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtUpperLimit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbbLimitType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtLowerLimit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btSave)
                    .addComponent(btGetDefaultConfig))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 417, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btGetDefaultConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btGetDefaultConfigActionPerformed
        // TODO add your handling code here:
        Object function = cbbFunction.getSelectedItem();
        if (function == null) {
            return;
        }
        FunctionConfig cf = functionManagement.getDefaultConfigOfFunction(function.toString());
        ItemConfig itemConfig = MyObjectMapper.map(cf, ItemConfig.class);
        if (config != null) {
            itemConfig.setItemName(config.getItemName());
            itemConfig.setTest_name(config.getTest_name());
        }
        showConfig(itemConfig);
    }//GEN-LAST:event_btGetDefaultConfigActionPerformed

    private void btSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSaveActionPerformed
        save();
    }//GEN-LAST:event_btSaveActionPerformed

    public ItemConfig getConfig() {
        return config;
    }

    public boolean isSaved() {
        if (config == null) {
            return true;
        }
        JSONObject bonus = config.getBonus();
        String bonusTxt = "{}";
        try {
            bonusTxt = JSONObject.parseObject(txtAreaConfig.getText()).toString();
        } catch (Exception e) {
        }
        if (bonus == null) {
            return false;
        }
        if (!bonus.toString().equals(bonusTxt)) {
            return false;
        }
        if (!isUpdated(config.getFunction(), cbbFunction.getSelectedItem())) {
            return false;
        }
        if (!isUpdated(config.getLimit_type(), cbbLimitType.getSelectedItem())) {
            return false;
        }
        if (!isUpdated(config.getFailApiName(), txtFailApiName.getText())) {
            return false;
        }
        if (!isUpdated(config.getItemName(), txtItemName.getText())) {
            return false;
        }
        if (!isUpdated(config.getTest_name(), txtApiName.getText())) {
            return false;
        }
        if (!isUpdated(config.getLower_limit(), txtLowerLimit.getText())) {
            return false;
        }
        if (!isUpdated(config.getUpper_limit(), txtUpperLimit.getText())) {
            return false;
        }
        if (config.isAlwaysRun() != cbAlwaysrun.isSelected()) {
            return false;
        }
        if (config.isStopAllMutitack() != cbStopMultiTasking.isSelected()) {
            return false;
        }
        if (config.isCheck_spec() != cbCheckSpec.isSelected()) {
            return false;
        }
        if (config.isDebugCancellCheckSpec() != cbSkipSpecDebug.isSelected()) {
            return false;
        }
        if (config.isDebugCancellRun() != cbSkipRunDebug.isSelected()) {
            return false;
        }
        if (config.isFail_continue() != cbFailContinue.isSelected()) {
            return false;
        }
        if (config.isMulti() != cbMulti.isSelected()) {
            return false;
        }
        if (config.isWait_multi_done() != cbWaitMulti.isSelected()) {
            return false;
        }
        if (config.isWait_local_multi_done()!= cbWaitLocalMulti.isSelected()) {
            return false;
        }
        if (config.isStopLocalMutitack()!= cbStopLocalMultiTasking.isSelected()) {
            return false;
        }
        if (config.getModeRun() != slModerun.getValue()) {
            return false;
        }
        if (config.getRetry() != (int) spnRetry.getValue()) {
            return false;
        }
        if (config.getTime_out() != (int) spnTimeOut.getValue()) {
            return false;
        }
        if (config.getBegin() != (int) spnBegin.getValue()) {
            return false;
        }
        return true;
    }

    private boolean isUpdated(String root, Object compareObject) {
        if (root != null && !root.isBlank()) {
            if (compareObject == null || !root.equalsIgnoreCase(compareObject.toString())) {
                return false;
            }
        } else if (compareObject != null && !compareObject.toString().isBlank()) {
            return false;
        }
        return true;
    }

    public void save() throws HeadlessException {
        // TODO add your handling code here:
        try {
            if (config == null) {
                return;
            }
            config.setBonus(JSONObject.parseObject(txtAreaConfig.getText()));
            config.setFailApiName(txtFailApiName.getText());
            config.setModeRun(slModerun.getValue());
            config.setStopAllMutitack(cbStopMultiTasking.isSelected());
            config.setStopLocalMutitack(cbStopLocalMultiTasking.isSelected());
            config.setAlwaysRun(cbAlwaysrun.isSelected());
            config.setCheck_spec(cbCheckSpec.isSelected());
            config.setDebugCancellCheckSpec(cbSkipSpecDebug.isSelected());
            config.setDebugCancellRun(cbSkipRunDebug.isSelected());
            config.setFail_continue(cbFailContinue.isSelected());
            config.setFunction(cbbFunction.getSelectedItem() == null ? null
                    : cbbFunction.getSelectedItem().toString());
            config.setTest_name(txtApiName.getText());
            config.setItemName(txtItemName.getText());
            config.setMulti(cbMulti.isSelected());
            config.setWait_multi_done(cbWaitMulti.isSelected());
            config.setWait_local_multi_done(cbWaitLocalMulti.isSelected());
            config.setBegin((int) spnBegin.getValue());
            config.setRetry((int) spnRetry.getValue());
            config.setTime_out((int) spnTimeOut.getValue());
            config.setLimit_type(cbbLimitType.getSelectedItem().toString());
            config.setLower_limit(txtLowerLimit.getText());
            config.setUpper_limit(txtUpperLimit.getText());
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getLocalizedMessage());
        }
    }

    private void txtAreaConfigKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAreaConfigKeyPressed
        // TODO add your handling code here:
        if (evt.isControlDown() && evt.getKeyCode() == KeyEvent.VK_S) {
            save();
        }
    }//GEN-LAST:event_txtAreaConfigKeyPressed

    private void showConfig(ItemConfig config) {
        try {
            if (config == null) {
                return;
            }
            cbStopMultiTasking.setSelected(config.isStopAllMutitack());
            cbSkipSpecDebug.setSelected(config.isDebugCancellCheckSpec());
            cbSkipRunDebug.setSelected(config.isDebugCancellRun());
            cbAlwaysrun.setSelected(config.isAlwaysRun());
            cbCheckSpec.setSelected(config.isCheck_spec());
            cbWaitMulti.setSelected(config.isWait_multi_done());
            cbFailContinue.setSelected(config.isFail_continue());
            cbMulti.setSelected(config.isMulti());
            slModerun.setValue(config.getModeRun());
            spnRetry.setValue(config.getRetry());
            spnBegin.setValue(config.getBegin());
            spnTimeOut.setValue(config.getTime_out());
            txtFailApiName.setText(config.getFailApiName());
            txtApiName.setText(config.getTest_name());
            txtItemName.setText(config.getItemName());
            txtLowerLimit.setText(config.getLower_limit());
            txtUpperLimit.setText(config.getUpper_limit());
            String limitType = config.getLimit_type();
            if (limitType != null && (limitType.equalsIgnoreCase("bool")
                    || limitType.equalsIgnoreCase("match")
                    || limitType.equalsIgnoreCase("limit"))) {
                cbbLimitType.setSelectedItem(limitType.toUpperCase());
            } else {
                cbbLimitType.setSelectedIndex(0);
            }
            String functionName = config.getFunction();
            if (functionName == null || this.functionManagement.getAllFunctionName().contains(functionName.toLowerCase())) {
                this.cbbFunction.setSelectedItem(functionName);
            } else {
                this.cbbFunction.setSelectedItem(null);
            }
            String configPretty = MyObjectMapper.prettyPrintJsonUsingDefaultPrettyPrinter(
                    config.getBonus().toJSONString());
            this.txtAreaConfig.setText(configPretty);
        } catch (JsonProcessingException ex) {
            ex.printStackTrace();
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btGetDefaultConfig;
    private javax.swing.JButton btSave;
    private javax.swing.JCheckBox cbAlwaysrun;
    private javax.swing.JCheckBox cbCheckSpec;
    private javax.swing.JCheckBox cbFailContinue;
    private javax.swing.JCheckBox cbMulti;
    private javax.swing.JCheckBox cbSkipRunDebug;
    private javax.swing.JCheckBox cbSkipSpecDebug;
    private javax.swing.JCheckBox cbStopLocalMultiTasking;
    private javax.swing.JCheckBox cbStopMultiTasking;
    private javax.swing.JCheckBox cbWaitLocalMulti;
    private javax.swing.JCheckBox cbWaitMulti;
    private javax.swing.JComboBox<String> cbbFunction;
    private javax.swing.JComboBox<String> cbbLimitType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSlider slModerun;
    private javax.swing.JSpinner spnBegin;
    private javax.swing.JSpinner spnRetry;
    private javax.swing.JSpinner spnTimeOut;
    private javax.swing.JTextField txtApiName;
    private javax.swing.JTextArea txtAreaConfig;
    private javax.swing.JTextField txtFailApiName;
    private javax.swing.JTextField txtItemName;
    private javax.swing.JTextField txtLowerLimit;
    private javax.swing.JTextField txtUpperLimit;
    // End of variables declaration//GEN-END:variables

    public void setData(ItemConfig config) {
        clear();
        this.config = config;
        init();
        showConfig(config);
    }

    public JSONObject getData() {
        return JSONObject.parseObject(this.txtAreaConfig.getText());
    }

    public void clear() {
        this.config = null;
        cbCheckSpec.setSelected(true);
        cbWaitMulti.setSelected(false);
        cbFailContinue.setSelected(false);
        cbMulti.setSelected(false);
        spnRetry.setValue(0);
        spnBegin.setValue(-1);
        spnTimeOut.setValue(Integer.MAX_VALUE);
        txtItemName.setText(null);
        txtApiName.setText(null);
        txtFailApiName.setText(null);
        txtLowerLimit.setText(null);
        txtUpperLimit.setText(null);
        cbbFunction.setSelectedItem(null);
        cbbLimitType.setSelectedIndex(0);
        txtAreaConfig.setText(null);
    }

    public String getItemName() {
        if (config == null) {
            return null;
        }
        return config.getItemName();
    }
}
