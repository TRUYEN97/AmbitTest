/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.tec02.configuration.module.view;

import com.tec02.Jmodel.IAction;
import com.tec02.configuration.module.AbsModuleView;
import com.tec02.configuration.module.IRefeshAndUpdate;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.JTabbedPane;

/**
 *
 * @author Administrator
 * @param <V> extends AbsModuleView
 */
public class TabPanel<V extends AbsModuleView> extends javax.swing.JPanel implements IRefeshAndUpdate {

    private final List<V> tabElements;
    private IAction<java.awt.event.KeyEvent> actionKeyPressed;
    private boolean showNewTab = true;
    private boolean tabChangedEventAble = true;
    private V currentTab;

    /**
     * Creates new form TabPanel
     *
     * @param tabPlacement
     */
    public TabPanel(int tabPlacement) {
        initComponents();
        this.tabPanel.setTabPlacement(tabPlacement);
        this.tabElements = new ArrayList<>();
    }

    public void setTabChangedEventAble(boolean tabChangedEventAble) {
        this.tabChangedEventAble = tabChangedEventAble;
    }

    public void setShowNewTab(boolean showNewTab) {
        this.showNewTab = showNewTab;
    }

    public void setActionKeyPressed(IAction<KeyEvent> actionKeyPressed) {
        this.actionKeyPressed = actionKeyPressed;
    }

    public TabPanel() {
        this(JTabbedPane.TOP);
    }

    public String deleteTab(String tabName) {
        for (int i = 0; i < tabPanel.getTabCount(); i++) {
            if (tabPanel.getTitleAt(i).equals(tabName)) {
                this.tabPanel.removeTabAt(i);
                this.tabElements.remove(i);
                return tabName;
            }
        }
        return null;
    }

    public String deleteTab(int index) {
        if (index >= 0 && index < tabPanel.getTabCount()) {
            String title = tabPanel.getTitleAt(index);
            this.tabElements.remove(index);
            this.tabPanel.removeTabAt(index);
            return title;
        }
        return null;
    }

    public void addTab(String name, V component) {
        try {
            tabChangedEventAble = false;
            if (name != null && this.tabPanel.indexOfTab(name) < 0) {
                this.tabElements.add(component);
                this.tabPanel.add(name, component);
                component.setTabCurremtPanel(this);
                component.validate();
            }
            if (showNewTab) {
                setSelectedTab(name);
            }
            tabPanel.validate();
        } finally {
            tabChangedEventAble = true;
        }
    }

    public String deleteTabSelected() {
        return deleteTab(tabPanel.getSelectedIndex());
    }

    public int getTabSelectedIndex() {
        return tabPanel.getSelectedIndex();
    }

    public V getTab(String name) {
        return tabElements.get(this.tabPanel.indexOfTab(name));
    }

    public V getCurrentTab() {
        return currentTab;
    }

    public List<V> getTabElements() {
        return tabElements;
    }

    public List<String> getTabNames() {
        return this.tabElements.stream().map((t) -> t.getTabName()).collect(Collectors.toList());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabPanel = new javax.swing.JTabbedPane();

        setBackground(new java.awt.Color(0, 204, 153));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));

        tabPanel.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabPanelStateChanged(evt);
            }
        });
        tabPanel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tabPanelKeyPressed(evt);
            }
        });
        add(tabPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void tabPanelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tabPanelKeyPressed
        if (this.actionKeyPressed == null) {
            return;
        }
        this.actionKeyPressed.action(evt);
    }//GEN-LAST:event_tabPanelKeyPressed

    public void setSelectedTab(String tabName) {
        int index = this.tabPanel.indexOfTab(tabName);
        if (index < 0) {
            return;
        }
        currentTab = this.tabElements.get(index);
        this.tabPanel.setSelectedIndex(index);
        this.tabPanel.validate();
    }

    public void setSelectedTab(V tab) {
        if (tab == null) {
            return;
        }
        V tabSelected;
        for (int i = 0; i < tabElements.size(); i++) {
            tabSelected = tabElements.get(i);
            if (tabSelected.equals(tab)) {
                currentTab = tabSelected;
                tabPanel.setSelectedIndex(i);
            }
        }
    }

    private void tabPanelStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabPanelStateChanged
        if (tabChangedEventAble) {
            if (currentTab != null && this.tabElements.contains(currentTab)) {
                currentTab.update();
            }
            currentTab = (V) this.tabPanel.getSelectedComponent();
            if (currentTab != null) {
                currentTab.tabSelected();
            }
        }
    }//GEN-LAST:event_tabPanelStateChanged

    public void clearAllTab() {
        try {
            tabChangedEventAble = false;
            this.tabPanel.removeAll();
            this.tabElements.clear();
        } finally {
            tabChangedEventAble = true;
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane tabPanel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void refesh() {
        for (V tabElement : tabElements) {
            tabElement.refesh();
        }
    }

    @Override
    public void update() {
        for (V tabElement : tabElements) {
            tabElement.update();
        }
    }

    public boolean isEmpty() {
        return this.tabElements.isEmpty();
    }
}
